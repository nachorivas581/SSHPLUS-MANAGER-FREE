#!/bin/bash
cat /dev/null > ~/.bash_history && history -c
barra="\033[0m\e[34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
x="ok"
IP=$(wget -qO- ipv4.icanhazip.com)
while true $x != "ok"
do
clear
if [ ! -e /home/keyssh ]; then
    mkdir /home/keyssh
fi
key_tmp="User:Nex$RANDOM"
a="User"
b="Nex$RANDOM"
echo "$a" > /tmp/a
echo "$b" > /tmp/b
pasta1=$(cat /tmp/a)
pasta2=$(cat /tmp/b)
signus=":"

mine_port () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2"
    let i++
    }
done <<< "$portas_var"
for((i=0; i<=${#portas[@]}; i++)); do
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && break
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "#!/bin/bash
cat /dev/null > ~/.bash_history && history -c
barra="\033[0m\e[34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
x="ok"
IP=$(wget -qO- ipv4.icanhazip.com)
while true $x != "ok"
do
clear
if [ ! -e /home/keyssh ]; then
    mkdir /home/keyssh
fi
key_tmp="vps-mod-premium:Nex$RANDOM"
a="vps-mod-premium"
b="Nex$RANDOM"
echo "$a" > /tmp/a
echo "$b" > /tmp/b
pasta1=$(cat /tmp/a)
pasta2=$(cat /tmp/b)
signus=":"

mine_port () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2"
    let i++
    }
done <<< "$portas_var"
for((i=0; i<=${#portas[@]}; i++)); do
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && break
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -e "${texto}"
done
}

fun_gerkey () {
echo ""
echo -ne "\033[1;36mNombre del cliente:\033[1;37m "; read client
if [[ -z $client ]]; then
   echo -e "\033[1;31m Nombre invalido o vacio\033[0m"
   sleep 2
   exit 0
fi
echo ""
echo -ne "\033[1;36mDuracion de Key\033[1;33m
(\033[1;31mEX: 20m m=Minutos, h=Horas, d=Dias\033[1;33m)\033[1;37m: "; read _temp
if [[ -z $_temp ]]; then
   echo -e "\033[1;31m Tiempo incorrecto o vacio\033[0m"
   sleep 2
   exit 0
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
[[ ! -e /var/www/index.html ]] && touch /var/www/index.html > /dev/null 2>&1
mkdir /var/www/$pasta1
mkdir /var/www/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/$pasta1
## chmod 777 /var/www/$pasta1/crz/*
else
[[ ! -e /var/www/html/index.php ]] && touch /var/www/html/index.php > /dev/null 2>&1
mkdir /var/www/html/$pasta1
mkdir /var/www/html/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/html/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/html/$pasta1
## chmod 777 /var/www/html/$pasta1/crz/*
fi
clear
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
echo -e "\033[0;34m============================"
echo -e "\033[1;32mINSTALADOR OFICIAL: \033[1;37mwget https://raw.githubusercontent.com/nachorivas581/Nexuser/main/inst;chmod 777 inst; ./inst\033[0m"
echo -e "\033[1;32mKEY:\033[1;37m$pasta1$signus$pasta2\033[0m"
echo -e "\033[1;32mUsuario:\033[1;37m$client\033[0m"
echo -e "\033[1;32mValidez:\033[1;37m$_temp\033[0m"
echo -e "\033[1;32mVersion:\033[1;37m$(cat /var/www/html/_script_$/versao)\033[0m"
echo -e "\033[0;34m============================"
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
else
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/html/$pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
fi
bash /home/keyssh/$client &
}

fun_gerkey_fixa () {
echo ""
echo -ne "\033[1;36mNombre del Cliente:\033[1;37m "; read client
if [[ -z $client ]]; then
   echo -e "\033[1;31m Nombre Invalido o Vacio\033[0m"
   sleep 2
   exit 0
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
mkdir /var/www/$pasta1
mkdir /var/www/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/$pasta1
## chmod 777 /var/www/$pasta1/crz/*
else
[[ ! -e /var/www/html/index.php ]] && touch /var/www/html/index.php > /dev/null 2>&1
mkdir /var/www/html/$pasta1
mkdir /var/www/html/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/html/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/html/$pasta1
## chmod 777 /var/www/html/$pasta1/crz/*
fi
clear
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
echo -e "\033[0;34m============================"
echo -e "\033[1;32mINSTALADOR OFICIAL: \033[1;37mwget https://raw.githubusercontent.com/nachorivas581/Nexuser/main/inst; chmod 777 inst; ./inst\033[0m"
echo -e "\033[1;32mKEY:\033[1;37m$pasta1$signus$pasta2\033[0m"
echo -e "\033[1;32mUsuario:\033[1;37m$client\033[0m"
echo -e "\033[1;32mValidez:\033[1;37m$_temp\033[0m"
echo -e "\033[1;32mVersion:\033[1;37m$(cat /var/www/html/_script_$/versao)\033[0m"
echo -e "\033[0;34m============================"
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
rm -rf /var/www/$pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
else
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
rm -rf /var/www/html/$pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
fi
# bash /home/keyssh/$client &
}

fun_gerkey_manual () {
echo ""
echo -ne "\033[1;36mNombre de Usuario:\033[1;37m "; read client
if [[ -z $client ]]; then
   echo -e "\033[1;31m Nombre Invalido O vacio\033[0m"
   sleep 2
   exit 0
fi
echo ""
echo -ne "\033[1;36mDuracion de la Key\033[1;33m
(\033[1;31mEX: \033[1;32m20m m=Minutos, h=Horas, d=Dias\033[1;33m)\033[1;37m: "; read _temp
if [[ -z $_temp ]]; then
   echo -e "\033[1;31m Tiempo Invalido O Vacio\033[0m"
   sleep 2
   exit 0
fi
echo ""
echo -ne "\033[1;36mIngrese la  Key [ xxxxxxxx:xxxxxxxx ]\033[1;33m
(\033[1;31mEX: \033[1;32m1234:1234\033[1;33m)\033[1;37m: "; read key
_lnk1=$(echo "$key"|awk -F : '{print $1}')
_lnk2=$(echo "$key"|awk -F : '{print $2}')
echo "$_lnk1" > /tmp/c
echo "$_lnk2" > /tmp/d
key1p=$(cat /tmp/c)
key2p=$(cat /tmp/d)
signus=":"
if [ "$key" = "" ]; then
   echo -e "\033[1;31m key nao alterada\033[0m"
   sleep 2
   exit 0
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
[[ ! -e /var/www/index.html ]] && touch /var/www/index.html > /dev/null 2>&1
[[ ! -d /var/www/$key1p ]] && mkdir /var/www/$key1p
[[ ! -d /var/www/$key1p/$key2p ]] && mkdir /var/www/$key1p/$key2p
touch /home/keyssh/$client
cp /home/list /var/www/$key1p/$key2p/list
## cp -a /home/_script_$/. /var/www/$key1p
## chmod 777 /var/www/$key1p/crz/*
else
[[ ! -e /var/www/html/index.php ]] && touch /var/www/html/index.php > /dev/null 2>&1
[[ ! -d /var/www/html/$key1p ]] && mkdir /var/www/html/$key1p
[[ ! -d /var/www/html/$key1p/$key2p ]] && mkdir /var/www/html/$key1p/$key2p
touch /home/keyssh/$client
cp /home/list /var/www/html/$key1p/$key2p/list
## cp -a /home/_script_$/. /var/www/html/$key1p
## chmod 777 /var/www/html/$key1p/crz/*
fi
clear
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
echo -e "\033[0;34m============================"
echo -e "\033[1;32mINSTALADOR OFICIAL: \033[1;37mwget https://raw.githubusercontent.com/nachorivas581/Nexuser/main/inst; chmod 777 inst; ./inst\033[0m"
echo -e "\033[1;32mKEY:\033[1;37m$pasta1$signus$pasta2\033[0m"
echo -e "\033[1;32mUsuario:\033[1;37m$client\033[0m"
echo -e "\033[1;32mValidez:\033[1;37m$_temp\033[0m"
echo -e "\033[1;32mVersion:\033[1;37m$(cat /var/www/html/_script_$/versao)\033[0m"
echo -e "\033[0;34m============================"
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
echo "#!/bin/bash
#NAME: $client
#KEY: $key1p$signus$key2p
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/$key1p
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
else
echo "#!/bin/bash
#NAME: $client
#KEY: $key1p$signus$key2p
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/html/$key1p
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
fi
bash /home/keyssh/$client &
}

fun_keyson () {
echo -e "$barra"
echo -e " \033[1;31m++| \033[1;32mKEYS ONLINE \033[1;31m|++ \033[0m"
echo -e "$barra"
echo ""
[ "$(ls -A /home/keyssh)" ] && echo -e "\033[1;32m Key Online!\033[1;37m" || echo -e "\033[1;31m No hay ninguna  Key Online!\033[0m"
echo ""
ls /home/keyssh
}

fun_delkey () {
echo -e "$barra"
echo -e " \033[1;31m++| \033[1;32mREMOVER KEY ONLINE \033[1;31m|++ \033[0m"
echo -e "$barra"
echo -e "\033[1;33m"
for keyson in $(ls /home/keyssh |sort |sed 's/.sh//g')
do
echo " $keyson"
done
echo ""
echo -ne "\033[1;36m Nombre de Usuario: \033[1;37m "; read client
if [ -e /home/keyssh/$client ]; then
    tmp=$(cat /home/keyssh/$client | sed -n '2 p')
    sed -i "s/\b$tmp\b/echo -n/g" /home/keyssh/$client > /dev/null 2>&1
    bash /home/keyssh/$client;
    sleep 2
    echo -e "\n\033[1;32m Key Eliminada Con Exito !\033[0m"
    else
    echo -e "\n\033[1;31m La Key No Existe !\033[0m"
    sleep 2.5s
fi
}

#LISTA PORTAS
mportas () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e $portas|grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
done <<< "$portas_var"
i=1
echo -e "$portas"
}
cowsay -f tux ...Generador De Keys [VPS-MOD]...|lolcat
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
echo -e "$barra"
sts=$([ "$(ls -A /home/keyssh)" ] && echo -e "\033[1;32m Key Online!\033[1;37m" || echo -e "\033[1;31m No hay ninguna  Key Online!\033[0m")
echo -e "\033[1;37mEstado: $sts"
echo -e "$barra"
mine_port
echo -e "$barra"
echo -e " \033[1;31m| \033[1;32mKEYGEN [VPS-MOD] \033[1;31m|            \033[1;33m[ Final ]\033[0m"
echo -e "$barra"
echo -e "\033[1;37m |1| \033[1;31m<----> \033[1;36mGENERAR KEY ALEATORIA \033[1;32m[CV] \033[0m"
echo -e "\033[1;37m |2| \033[1;31m<----> \033[1;36mGENERAR KEY ALEATORIA PERMANENTE \033[1;32m[SV] \033[0m"
echo -e "\033[1;37m |3| \033[1;31m<----> \033[1;36mGENERAR KEY MANUAL\033[1;33m ! \033[1;32m[CV] \033[0m"
if [[ $(mportas|grep apache2|head -1) ]]; then
echo -e "\033[1;37m |4| \033[1;31m<----> \033[1;32m(ACTIVO)\033[1;36m - PARAR KEYGEN"
else
echo -e "\033[1;37m |4| \033[1;31m<----> \033[1;31m(DETENIDO)\033[1;36m - INICIAR KEYGEN"
fi
echo -e "\033[1;37m |5| \033[1;31m<----> \033[1;36mKEYS ONLINE\033[0m"
echo -e "\033[1;37m |6| \033[1;31m<----> \033[1;36mREMOVER KEY\033[0m"
#echo -e "\033[1;37m |X| \033[1;31m<----> \033[1;36mLOG DE REGISTROS\033[0m"
echo -e "\033[1;37m |7| \033[1;31m<----> \033[1;36mBOT TELEGRAM KEY-GEN\033[0m"
echo -e "\033[1;37m |8| \033[1;31m<----> \033[1;36mOPTIMIZAR SERVIDOR    \033[1;31mRam:   \033[1;37m $_usor\033[0m"
echo -e "\033[1;37m |0| \033[1;31m<----> \033[1;36mSALIR DEL KEYGEN       \033[1;31mNucleo:\033[1;37m $_usop \033[0m"
echo -e "$barra"
echo -ne "\033[0;37m[0-8]: "; read x

case $x in
1)
fun_gerkey
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
2)
fun_gerkey_fixa
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver  al \033[1;32mMENU!\033[0m"; read
;;
3)
fun_gerkey_manual
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
4)
if [[ $(mportas|grep apache2|head -1) ]]; then
service apache2 stop > /dev/null 2>&1
echo ""
echo -e "\033[1;31mParado"
echo -e "\033[1;31mDeshabilitado Puerto 80"
else
apt-get install apache2 -y > /dev/null 2>&1
sed -i "s;Listen 81;Listen 80;g" /etc/apache2/ports.conf
service apache2 start > /dev/null 2>&1
service apache2 restart > /dev/null 2>&1
echo ""
echo -e "\033[1;32mIniciado"
echo -e "\033[1;32mEscuchando Apache Puerto 81"
fi
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
5)
clear
fun_keyson
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
6)
clear
fun_delkey
echo -e "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"
;;
7)
clear
* > /dev/null 2>&1; cd /bin & botrun
exit
;;
8)
clear
otimizar
echo -e "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
0)
echo -ne "\n\033[1;31mEnter para SALIR\033[0m"; read
clear
exit
clear
;;
*)
echo -ne "\n\033[1;31mOpcion invalida !\033[0m"; read
ok
;;
esac
done
#fim
cat /dev/null > ~/.bash_history && history -c

   break
   }
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -e "${texto}"
done
}

fun_gerkey () {
echo ""
echo -ne "\033[1;36mNombre del cliente:\033[1;37m "; read client
if [[ -z $client ]]; then
   echo -e "\033[1;31m Nombre invalido o vacio\033[0m"
   sleep 2
   exit 0
fi
echo ""
echo -ne "\033[1;36mDuracion de Key\033[1;33m
(\033[1;31mEX: 20m m=Minutos, h=Horas, d=Dias\033[1;33m)\033[1;37m: "; read _temp
if [[ -z $_temp ]]; then
   echo -e "\033[1;31m Tiempo incorrecto o vacio\033[0m"
   sleep 2
   exit 0
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
[[ ! -e /var/www/index.html ]] && touch /var/www/index.html > /dev/null 2>&1
mkdir /var/www/$pasta1
mkdir /var/www/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/$pasta1
## chmod 777 /var/www/$pasta1/crz/*
else
[[ ! -e /var/www/html/index.php ]] && touch /var/www/html/index.php > /dev/null 2>&1
mkdir /var/www/html/$pasta1
mkdir /var/www/html/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/html/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/html/$pasta1
## chmod 777 /var/www/html/$pasta1/crz/*
fi
clear
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
echo -e "\033[0;34m============================"
echo -e "\033[1;32mINSTALADOR OFICIAL: \033[1;37mwget https://raw.githubusercontent.com/nachorivas581/Nexuser/main/inst; chmod 777 inst; ./inst\033[0m"
echo -e "\033[1;32mKEY:\033[1;37m$pasta1$signus$pasta2\033[0m"
echo -e "\033[1;32mUsuario:\033[1;37m$client\033[0m"
echo -e "\033[1;32mValidez:\033[1;37m$_temp\033[0m"
echo -e "\033[1;32mVersion:\033[1;37m$(cat /var/www/html/_script_$/versao)\033[0m"
echo -e "\033[0;34m============================"
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
else
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/html/$pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
fi
bash /home/keyssh/$client &
}

fun_gerkey_fixa () {
echo ""
echo -ne "\033[1;36mNombre del Cliente:\033[1;37m "; read client
if [[ -z $client ]]; then
   echo -e "\033[1;31m Nombre Invalido o Vacio\033[0m"
   sleep 2
   exit 0
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
mkdir /var/www/$pasta1
mkdir /var/www/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/$pasta1
## chmod 777 /var/www/$pasta1/crz/*
else
[[ ! -e /var/www/html/index.php ]] && touch /var/www/html/index.php > /dev/null 2>&1
mkdir /var/www/html/$pasta1
mkdir /var/www/html/$pasta1/$pasta2
touch /home/keyssh/$client
cp /home/list /var/www/html/$pasta1/$pasta2/list
## cp -a /home/_script_$/. /var/www/html/$pasta1
## chmod 777 /var/www/html/$pasta1/crz/*
fi
clear
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
echo -e "\033[0;34m============================"
echo -e "\033[1;32mINSTALADOR OFICIAL: \033[1;37mwget https://raw.githubusercontent.com/nachorivas581/Nexuser/main/inst; chmod 777 inst; ./inst\033[0m"
echo -e "\033[1;32mKEY:\033[1;37m$pasta1$signus$pasta2\033[0m"
echo -e "\033[1;32mUsuario:\033[1;37m$client\033[0m"
echo -e "\033[1;32mValidez:\033[1;37m$_temp\033[0m"
echo -e "\033[1;32mVersion:\033[1;37m$(cat /var/www/html/_script_$/versao)\033[0m"
echo -e "\033[0;34m============================"
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
rm -rf /var/www/$pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
else
echo "#!/bin/bash
#NAME: $client
#KEY: $pasta1$signus$pasta2
#VALIDADE: $_temp
rm -rf /var/www/html/$pasta1
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
fi
# bash /home/keyssh/$client &
}

fun_gerkey_manual () {
echo ""
echo -ne "\033[1;36mNombre de Usuario:\033[1;37m "; read client
if [[ -z $client ]]; then
   echo -e "\033[1;31m Nombre Invalido O vacio\033[0m"
   sleep 2
   exit 0
fi
echo ""
echo -ne "\033[1;36mDuracion de la Key\033[1;33m
(\033[1;31mEX: \033[1;32m20m m=Minutos, h=Horas, d=Dias\033[1;33m)\033[1;37m: "; read _temp
if [[ -z $_temp ]]; then
   echo -e "\033[1;31m Tiempo Invalido O Vacio\033[0m"
   sleep 2
   exit 0
fi
echo ""
echo -ne "\033[1;36mIngrese la  Key [ xxxxxxxx:xxxxxxxx ]\033[1;33m
(\033[1;31mEX: \033[1;32m1234:1234\033[1;33m)\033[1;37m: "; read key
_lnk1=$(echo "$key"|awk -F : '{print $1}')
_lnk2=$(echo "$key"|awk -F : '{print $2}')
echo "$_lnk1" > /tmp/c
echo "$_lnk2" > /tmp/d
key1p=$(cat /tmp/c)
key2p=$(cat /tmp/d)
signus=":"
if [ "$key" = "" ]; then
   echo -e "\033[1;31m key nao alterada\033[0m"
   sleep 2
   exit 0
fi
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
[[ ! -e /var/www/index.html ]] && touch /var/www/index.html > /dev/null 2>&1
[[ ! -d /var/www/$key1p ]] && mkdir /var/www/$key1p
[[ ! -d /var/www/$key1p/$key2p ]] && mkdir /var/www/$key1p/$key2p
touch /home/keyssh/$client
cp /home/list /var/www/$key1p/$key2p/list
## cp -a /home/_script_$/. /var/www/$key1p
## chmod 777 /var/www/$key1p/crz/*
else
[[ ! -e /var/www/html/index.php ]] && touch /var/www/html/index.php > /dev/null 2>&1
[[ ! -d /var/www/html/$key1p ]] && mkdir /var/www/html/$key1p
[[ ! -d /var/www/html/$key1p/$key2p ]] && mkdir /var/www/html/$key1p/$key2p
touch /home/keyssh/$client
cp /home/list /var/www/html/$key1p/$key2p/list
## cp -a /home/_script_$/. /var/www/html/$key1p
## chmod 777 /var/www/html/$key1p/crz/*
fi
clear
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
echo -e "\033[0;34m============================"
echo -e "\033[1;32mINSTALADOR OFICIAL: \033[1;37mwget https://raw.githubusercontent.com/nachorivas581/Nexuser/main/inst; chmod 777 inst; ./inst\033[0m"
echo -e "\033[1;32mKEY:\033[1;37m$pasta1$signus$pasta2\033[0m"
echo -e "\033[1;32mUsuario:\033[1;37m$client\033[0m"
echo -e "\033[1;32mValidez:\033[1;37m$_temp\033[0m"
echo -e "\033[1;32mVersion:\033[1;37m$(cat /var/www/html/_script_$/versao)\033[0m"
echo -e "\033[0;34m============================"
VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID")
if [[ "$VERSION_ID" = 'VERSION_ID="14.04"' ]]; then
echo "#!/bin/bash
#NAME: $client
#KEY: $key1p$signus$key2p
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/$key1p
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
else
echo "#!/bin/bash
#NAME: $client
#KEY: $key1p$signus$key2p
#VALIDADE: $_temp
sleep $_temp
rm -rf /var/www/html/$key1p
rm -rf /home/keyssh/$client
exit" > /home/keyssh/$client
fi
bash /home/keyssh/$client &
}

fun_keyson () {
echo -e "$barra"
echo -e " \033[1;31m++| \033[1;32mKEYS ONLINE \033[1;31m|++ \033[0m"
echo -e "$barra"
echo ""
[ "$(ls -A /home/keyssh)" ] && echo -e "\033[1;32m Key Online!\033[1;37m" || echo -e "\033[1;31m No hay ninguna  Key Online!\033[0m"
echo ""
ls /home/keyssh
}

fun_delkey () {
echo -e "$barra"
echo -e " \033[1;31m++| \033[1;32mREMOVER KEY ONLINE \033[1;31m|++ \033[0m"
echo -e "$barra"
echo -e "\033[1;33m"
for keyson in $(ls /home/keyssh |sort |sed 's/.sh//g')
do
echo " $keyson"
done
echo ""
echo -ne "\033[1;36m Nombre de Usuario: \033[1;37m "; read client
if [ -e /home/keyssh/$client ]; then
    tmp=$(cat /home/keyssh/$client | sed -n '2 p')
    sed -i "s/\b$tmp\b/echo -n/g" /home/keyssh/$client > /dev/null 2>&1
    bash /home/keyssh/$client;
    sleep 2
    echo -e "\n\033[1;32m Key Eliminada Con Exito !\033[0m"
    else
    echo -e "\n\033[1;31m La Key No Existe !\033[0m"
    sleep 2.5s
fi
}

#LISTA PORTAS
mportas () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e $portas|grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
done <<< "$portas_var"
i=1
echo -e "$portas"
}
cowsay -f tux ...Key Generada [VPS-MOD]...|lolcat
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
echo -e "$barra"
sts=$([ "$(ls -A /home/keyssh)" ] && echo -e "\033[1;32m Key Online!\033[1;37m" || echo -e "\033[1;31m No hay ninguna  Key Online!\033[0m")
echo -e "\033[1;37mEstado: $sts"
echo -e "$barra"
mine_port
echo -e "$barra"
echo -e " \033[1;31m| \033[1;32mKEYGEN [VPS-MOD] \033[1;31m|            \033[1;33m[ Final ]\033[0m"
echo -e "$barra"
echo -e "\033[1;37m |1| \033[1;31m<----> \033[1;36mGENERAR KEY ALEATORIA \033[1;32m[CV] \033[0m"
echo -e "\033[1;37m |2| \033[1;31m<----> \033[1;36mGENERAR KEY ALEATORIA PERMANENTE \033[1;32m[SV] \033[0m"
echo -e "\033[1;37m |3| \033[1;31m<----> \033[1;36mGENERAR KEY MANUAL\033[1;33m ! \033[1;32m[CV] \033[0m"
if [[ $(mportas|grep apache2|head -1) ]]; then
echo -e "\033[1;37m |4| \033[1;31m<----> \033[1;32m(ACTIVO)\033[1;36m - PARAR KEYGEN"
else
echo -e "\033[1;37m |4| \033[1;31m<----> \033[1;31m(DETENIDO)\033[1;36m - INICIAR KEYGEN"
fi
echo -e "\033[1;37m |5| \033[1;31m<----> \033[1;36mKEYS ONLINE\033[0m"
echo -e "\033[1;37m |6| \033[1;31m<----> \033[1;36mREMOVER KEY\033[0m"
#echo -e "\033[1;37m |X| \033[1;31m<----> \033[1;36mLOG DE REGISTROS\033[0m"
echo -e "\033[1;37m |7| \033[1;31m<----> \033[1;36mACTUALIZAR KEYGEN\033[0m"
echo -e "\033[1;37m |8| \033[1;31m<----> \033[1;36mOPTIMIZAR SERVIDOR    \033[1;31mRam:   \033[1;37m $_usor\033[0m"
echo -e "\033[1;37m |0| \033[1;31m<----> \033[1;36mSALIR DEL KEYGEN       \033[1;31mNucleo:\033[1;37m $_usop \033[0m"
echo -e "$barra"
echo -ne "\033[0;37m[0-8]: "; read x

case $x in
1)
fun_gerkey
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
2)
fun_gerkey_fixa
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver  al \033[1;32mMENU!\033[0m"; read
;;
3)
fun_gerkey_manual
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
4)
if [[ $(mportas|grep apache2|head -1) ]]; then
service apache2 stop > /dev/null 2>&1
echo ""
echo -e "\033[1;31mParado"
echo -e "\033[1;31mDeshabilitado Puerto 80"
else
apt-get install apache2 -y > /dev/null 2>&1
sed -i "s;Listen 81;Listen 80;g" /etc/apache2/ports.conf
service apache2 start > /dev/null 2>&1
service apache2 restart > /dev/null 2>&1
echo ""
echo -e "\033[1;32mIniciado"
echo -e "\033[1;32mEscuchando Apache Puerto 81"
fi
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
5)
clear
fun_keyson
echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
6)
clear
fun_delkey
echo -e "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"
;;
7)
clear
rm $HOME/instala_server* > /dev/null 2>&1; echo "Es la Ultima Version"
exit
;;
8)
clear
otimizar
echo -e "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
;;
0)
echo -ne "\n\033[1;31mEnter para SALIR\033[0m"; read
clear
exit
clear
;;
*)
echo -ne "\n\033[1;31mOpcion invalida !\033[0m"; read
ok
;;
esac
done
#fim
cat /dev/null > ~/.bash_history && history -c
